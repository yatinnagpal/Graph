#include<bits/stdc++.h>
using namespace std;
class Graph
{
    list<int> *l;
    int V;
    public:
    Graph(int v)
    {
        V=v;
        l=new list<int>[V];
    }
    void addEdges(int i,int j,bool undire=true)
    {
        l[i].push_back(j);
        if(undire)
        l[j].push_back(i);
    }
    bool dfs(int source, vector<bool>&visited,int parent)
    {
        visited[source]=true;
        for(auto nbrs:l[source])
        {
            if(!visited[nbrs])
            {
                bool containCycle=dfs(nbrs,visited,source);
                if(containCycle)
                return true;
            }
            else if(nbrs!=parent)
            return true;
        }
        return false;
    }
   void containCycle(int source)
   {
       vector<bool>visited{false};
       bool check=dfs(source,visited,-1);
       if(check==true)
       cout<<"CYCLIC GRAPH\n";
       else
       cout<<"NOT CONTAIN ANY CYCLE\n";
   }
    
};

int main()
{
    Graph G(7);
    G.addEdges(0,1);
    G.addEdges(1,2);
    G.addEdges(2,3);
    G.addEdges(3,5);
    G.addEdges(5,6);
    G.addEdges(4,5);
//    G.addEdges(0,4);
//    G.addEdges(3,4);
    G.containCycle(0);
}
