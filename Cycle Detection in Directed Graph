#include<bits/stdc++.h>
using namespace std;
class Graph
{
    list<int> *l;
    int V;
    public:
    Graph(int v)
    {
        V=v;
        l=new list<int>[V];
    }
    void addEdges(int i,int j,bool undire=false)
    {
        l[i].push_back(j);
    }
    
   bool dfs(int source,vector<bool>&visited,vector<bool>&stack)
   {
       visited[source]=true;
       stack[source]=true;
       for(auto nbrs:l[source])
       {
           if(stack[nbrs]==true)
           return true;
           else if(visited[source]==false)
           {
               bool cycle=dfs(nbrs,visited,stack);
               if(cycle==true)
               return true;
           }
       }
       stack[source]=false;
       return false;
   }
   void containCycle(int source)
   {
       vector<bool> visited(V,false);
       vector<bool> stack(V,false);
       bool cycle=dfs(source,visited,stack);
       if(cycle==true)
       cout<<"IT CONTAIN CYCLE";
       else
       cout<<"CYCLE NOT PRESENT";   
   }
    
};

int main()
{
    Graph G(7);
    G.addEdges(0,1);
    G.addEdges(1,2);
    G.addEdges(2,3);
    G.addEdges(3,0);
//    G.addEdges(5,6);
    G.addEdges(0,4);
    G.addEdges(5,4);
    G.addEdges(0,5);
 //   G.addEdges(3,4);
    G.containCycle(0);
}
